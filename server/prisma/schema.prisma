// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  name          String
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  handicap      Float?
  phoneNumber   String?
  profileImage  String?
  events        Event[]  @relation("EventParticipants")
  scores        Score[]
  groups        Group[]  @relation("GroupMembers")
}

model Course {
  id            String   @id @default(cuid())
  name          String
  address       String
  phoneNumber   String?
  website       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  events        Event[]
  holes         Hole[]
}

model Hole {
  id            String   @id @default(cuid())
  courseId      String
  holeNumber    Int
  par           Int
  handicap      Int      // Course hole handicap (1-18)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  course        Course   @relation(fields: [courseId], references: [id])
  scores        Score[]

  @@unique([courseId, holeNumber])
}

model Event {
  id            String   @id @default(cuid())
  name          String
  date          DateTime
  courseId      String
  description   String?
  maxPlayers    Int?
  entryFee      Float?
  status        String   @default("upcoming") // upcoming, in-progress, completed, cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  course        Course   @relation(fields: [courseId], references: [id])
  participants  User[]   @relation("EventParticipants")
  groups        Group[]
  scores        Score[]
}

model Group {
  id            String   @id @default(cuid())
  eventId       String
  groupNumber   Int      // Tee time group number
  teeTime       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id])
  members       User[]   @relation("GroupMembers")

  @@unique([eventId, groupNumber])
}

model Score {
  id            String   @id @default(cuid())
  eventId       String
  userId        Int
  holeId        String
  grossScore    Int      // Actual score on the hole
  netScore      Int?     // Score after handicap adjustment
  skinWon       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  event         Event    @relation(fields: [eventId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  hole          Hole     @relation(fields: [holeId], references: [id])

  @@unique([eventId, userId, holeId])
}
